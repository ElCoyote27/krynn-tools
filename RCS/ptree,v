head	1.11;
access;
symbols;
locks
	root:1.11; strict;
comment	@# @;


1.11
date	2015.09.23.17.09.26;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2015.07.04.03.07.26;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2015.07.04.03.05.58;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2015.01.09.21.20.50;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2015.01.09.17.38.53;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2015.01.09.17.35.54;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2013.05.21.15.54.06;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2013.03.29.08.47.46;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.21.10.02.20;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.21.08.01.05;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.27.11.59.31;	author root;	state Exp;
branches;
next	;


desc
@@


1.11
log
@*** empty log message ***
@
text
@#!/bin/bash
# $Id: ptree,v 1.10 2015/07/04 03:07:26 root Exp root $

# ptree only supports one and exactly one PID so forget other args..
#MPSARGS="-planA"		### ASCII
MPSARGS="-planG"		### Graphics

# Initialization
myPID=$1
myPPID=${myPID}
myTOP=${myPID}

#Sub-routines
errecho() {
	>&2 echo "$*"
}

CheckPID() {
	# ptree only supports one and exactly one PID so forget about other args..
	if [ "x$1" = "x" ]; then
		errecho "no PID specified!"
		return 0
	fi

	# Verify PID's presence
	ps --no-heading -o pid ${myPID} > /dev/null 2>&1 || {
		errecho "PID $myPID does not exist!"
		return 1
	}
	return 0
}

GetPPID() {
	CheckPID $1 || exit 127
	localPPID=$(awk '{ if ( $1 ~ "PPid:" ) print $2 }' /proc/$1/status)
	[ -f /proc/${localPPID}/status ] && {
		localPName=$(awk '{ if ( $1 ~ "Name:" ) print $2 }' /proc/${localPPID}/status)
		# localPPID=`ps --no-heading -o ppid ${myPPID} 2> /dev/null|xargs`
		[ "x${localPPID}" != "x" ] && {
			[ "x${localPName}" != "x" -a "x${localPName}" != "xinit" -a "x${localPName}" != "xsystemd" -a "x${localPName}" != "xscreen" ] && {
				echo ${localPPID}; return 0
			} || {
				# errecho "Discarded PPID: ${localPPID}"
				echo 0 ; return 1
			}
		} || {
			echo 0 ; return 1
		}
	} || {
		echo 0 ; return 1
	}
	return 0
}
#

# Sanity Check
if [ "x$(uname -s)" != "xLinux" ]; then
	echo "Not supported on $(uname -s)! Exit!"
	exit 127
fi

# Sanity Check (2)
CheckPID ${myPID} || exit 127

# Main routine
if [ "x${myTOP}" != "x" ]; then
	# Walk up to Find Parent until myPPID=1
	while [ ${myTOP} -gt 0 ]; do
		myTOP=$(GetPPID ${myPPID})
		if [ ${myTOP} -gt 1 ]; then
			myPPID=${myTOP}
			## echo "Found PPID: ${myPPID}"
		fi
	done
	exec /usr/bin/pstree ${MPSARGS} ${myPPID}
else
	exec /usr/bin/pstree ${MPSARGS}
fi
@


1.10
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Id: ptree,v 1.9 2015/07/04 03:05:58 root Exp root $
d5 2
a6 2
MPSARGS="-planA"
#MPSARGS="-planG"
@


1.9
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Id: ptree,v 1.8 2015/01/09 21:20:50 root Exp $
d40 1
a40 1
			[ "x${localPName}" != "x" -a "x${localPName}" != "xinit" -a "x${localPName}" != "xsystemd" -a -a "x${localPName}" != "xscreen" ] && {
@


1.8
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Id: ptree,v 1.7 2015/01/09 17:38:53 root Exp root $
d40 1
a40 1
			[ "x${localPName}" != "x" -a "x${localPName}" != "xinit" -a "x${localPName}" != "xscreen" ] && {
@


1.7
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Id: ptree,v 1.6 2015/01/09 17:35:54 root Exp root $
d56 7
d65 1
@


1.6
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Id: ptree,v 1.5 2013/05/21 15:54:06 root Exp root $
d21 1
a21 1
		echo "no PID specified!"
d27 1
a27 1
		echo "PID $myPID does not exist!"
d36 1
a36 1
	if [ -f /proc/${localPPID}/status ]; then
d41 1
a41 1
				echo ${localPPID}
d43 2
a44 2
				errecho "Discarded PPID: ${localPPID}"
				echo 0
d47 1
a47 1
			echo 0
d49 3
a51 4
		else
			echo 0
			return 1
		fi
@


1.5
log
@Small minor bugfix (stupido).
@
text
@d2 1
a2 1
# $Id: ptree,v 1.4 2013/03/29 08:47:46 root Exp root $
d5 2
d14 4
d35 19
a53 6
	localPPID=`ps --no-heading -o ppid ${myPPID} 2> /dev/null|xargs`
	[ "x${localPPID}" != "x" ] && {
		return 0
	} || {
		return ${localPPID}
	}		
d61 2
a62 2
	while [ ${myTOP} -gt 1 ]; do
		myTOP=`ps --no-heading -o ppid ${myPPID}|xargs`
d65 1
a66 1
		# echo "Found PPID: ${myPPID}"
d68 1
a68 1
	exec /usr/bin/pstree -plaA ${myPPID}
d70 1
a70 1
	exec /usr/bin/pstree -plaA
@


1.4
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Id: ptree,v 1.3 2012/06/21 10:02:20 root Exp $
d13 1
a13 1
	# ptree only supports one and exactly one PID so forget other args..
d40 13
a52 9
# Walk up to Find Parent until myPPID=1
while [ ${myTOP} -gt 1 ]; do
	myTOP=`ps --no-heading -o ppid ${myPPID}|xargs`
	if [ ${myTOP} -gt 1 ]; then
		myPPID=${myTOP}
	fi
	# echo "Found PPID: ${myPPID}"
done
exec /usr/bin/pstree -plaA ${myPPID}
@


1.3
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Id: ptree,v 1.2 2012/06/21 08:01:05 root Exp root $
d48 1
a48 1
exec /usr/bin/pstree -plaG ${myPPID}
@


1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Id: ptree,v 1.1 2009/11/27 11:59:31 root Exp $
d5 2
d8 18
a25 2
myPPID=1
myTOP=0
d27 5
a31 3
# Verify PID's presence
ps -o pid ${myPID} > /dev/null && {
		myPPID=${myPID}
d33 2
a34 2
		echo "PID $myPID does not exist!"
		exit 127
d36 3
d41 1
a41 1
while [ "x${myTOP}" != "x1" ]; do
d43 1
a43 1
	if [ "x${myTOP}" != "x1" ]; then
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# $Id$
d4 22
a25 1
exec /usr/bin/pstree -plaG $*
@
